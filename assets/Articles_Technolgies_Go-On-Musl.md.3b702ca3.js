import{_ as a,o as s,c as e,V as o}from"./chunks/framework.8accd9b8.js";const g=JSON.parse('{"title":"关于 Golang 二进制文件在 musl 作为 主要 libc 的 Linux 发行版的适配记录","description":"","frontmatter":{"title":"关于 Golang 二进制文件在 musl 作为 主要 libc 的 Linux 发行版的适配记录","author":"Ju33Huang22","date":"2024-01-28","categories":["技术文"],"tags":["Golang","Go","musl","libc","Linux"]},"headers":[],"relativePath":"Articles/Technolgies/Go-On-Musl.md","filePath":"Articles/Technolgies/Go-On-Musl.md","lastUpdated":1706383864000}'),l={name:"Articles/Technolgies/Go-On-Musl.md"},n=o(`<h1 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h1><p>首先我自己没有对 Golang 很深了解，一切都在学习中，不过还好目前为止学习得还算顺利，毕竟写的都是人话。</p><p>在本文章中我不会去锐评有关 musl 的东西，毕竟我不会C，没啥资格聊这个。</p><h1 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h1><p>这次的适配记录的起因是因为我的 <a href="https://github.com/QingNetwork/tpclash/" target="_blank" rel="noreferrer">复活版TPClash</a> 项目群中有用户反馈 Alpine Linux 无法正常运行，后面想了想 Alpine Linux 是使用 <a href="https://zh.wikipedia.org/wiki/Musl" target="_blank" rel="noreferrer">musl</a> 作为 <a href="https://zh.wikipedia.org/wiki/C%E6%A8%99%E6%BA%96%E5%87%BD%E5%BC%8F%E5%BA%AB" target="_blank" rel="noreferrer">C标准函式库(libc)</a> 的，这么一想起不来也正常了</p><p>像 Alpine Linux 一样使用 musl 的发行版其实很多，我自认为用的人比较多的发行版例如 OpenWrt 和 Gentoo，所以<strong>能</strong>解决这个问题的话还是有必要的。</p><h2 id="cgo-是什么" tabindex="-1">CGO 是什么？ <a class="header-anchor" href="#cgo-是什么" aria-label="Permalink to &quot;CGO 是什么？&quot;">​</a></h2><p>估计很多刚学 Go 的人和我一样很懵，虽然没啥人简短总结，不过算是找到了个比较简短的解释。</p><blockquote><p>Go 作为当下最火的开发语言之一，它的优势不必多说。Go 对于高并发的支持，使得它可以很方便的作为独立模块嵌入业务系统。有鉴于我司大量的 C/C++存量代码，如何 将 Go 和 C/C++进行打通就尤为重要。**Golang 自带的 CGO 可以支持与 C 语言接口的互通。**本文首先介绍了 cgo 的常见用法，然后根据底层<a href="https://cloud.tencent.com/product/tcap?from_column=20065&amp;from=20065" target="_blank" rel="noreferrer">代码分析</a>其实现机制，最后在特定场景下进行 cgo 实践。</p><p>来源：<a href="https://cloud.tencent.com/developer/article/1786332" target="_blank" rel="noreferrer">Go与C的桥梁：CGO入门剖析与实践</a></p></blockquote><h2 id="我的项目用到了c" tabindex="-1">我的项目用到了C <a class="header-anchor" href="#我的项目用到了c" aria-label="Permalink to &quot;我的项目用到了C&quot;">​</a></h2><p>我自己还没学完 Golang，所以我让 GPT-3.5 给了个回答。</p><blockquote><p>在使用 musl 作为 C 标准库的 Linux 发行版中，可能会出现与 glibc 不同的问题，尤其是在涉及到 C 语言代码的 Go 项目中。以下是一些建议和解决方案：</p><ol><li><p><strong>交叉编译：</strong> 一个通用的方法是在开发环境中使用 glibc，但在部署目标系统上使用 musl。这可以通过交叉编译来实现。在构建 Go 项目时，可以通过设置环境变量 <code>CC</code> 来指定使用的 C 编译器。例如：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">CC</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">musl-gcc</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span></span></code></pre></div><p>这将使用 musl-gcc 编译器来构建你的 Go 项目，确保 musl 库被链接到二进制文件中。</p></li><li><p><strong>静态链接：</strong> 如果交叉编译并不适用，考虑将 C 代码静态链接到 Go 二进制文件中。这样，你可以在目标系统上运行 Go 二进制文件而不必依赖目标系统上的 C 库。可以通过设置 <code>CGO_ENABLED</code> 环境变量为 <code>0</code> 来禁用 CGO，并使用 <code>-ldflags</code> 标志将 C 代码静态链接到 Go 二进制文件中。例如：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">CGO_ENABLED</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">go</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-ldflags=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-linkmode external -extldflags -static</span><span style="color:#89DDFF;">&quot;</span></span></code></pre></div><p>这会禁用 CGO 并在构建时将 C 代码静态链接到 Go 二进制文件中。</p></li><li><p><strong>使用正确的编译器和工具链：</strong> 确保在目标系统上使用正确的编译器和工具链。如果目标系统使用 musl，确保在目标系统上安装了 musl 工具链和库。</p></li><li><p><strong>检查依赖库的兼容性：</strong> 如果你的项目依赖于其他库，确保这些库与 musl 兼容。有些库可能依赖于特定于 glibc 的特性，因此在 musl 系统上可能会遇到问题。</p></li><li><p><strong>查看错误日志：</strong> 如果你遇到问题，查看错误日志并检查特定于 musl 的问题。这可能包括一些系统调用的不同行为或缺失的功能。</p></li></ol><p>请注意，这些建议可能需要根据你的具体情况进行调整。在处理与 musl 兼容性问题时，了解 musl 的特性和与 glibc 的差异是很重要的。</p><p>—— ChatGPT 3.5</p></blockquote><h2 id="我的项目没有用到c" tabindex="-1">我的项目没有用到C <a class="header-anchor" href="#我的项目没有用到c" aria-label="Permalink to &quot;我的项目没有用到C&quot;">​</a></h2><p>如果你的项目中没有用到C的话，其实是可以关掉的，关掉也是最简单的解决方法。</p><p>很简单，在编译的时候加个环境变量关掉 CGO 就好了。</p><h3 id="如果你是在普通的终端中" tabindex="-1">如果你是在普通的终端中 <a class="header-anchor" href="#如果你是在普通的终端中" aria-label="Permalink to &quot;如果你是在普通的终端中&quot;">​</a></h3><p>写到底层环境变量中（如 <code>/etc/enviroment</code> 或 <code>~/.bashrc</code>）或每次新建终端时输入：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">export</span><span style="color:#A6ACCD;"> CGO_ENABLED</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span></span></code></pre></div><h3 id="如果你是在-github-actions-中" tabindex="-1">如果你是在 Github Actions 中 <a class="header-anchor" href="#如果你是在-github-actions-中" aria-label="Permalink to &quot;如果你是在 Github Actions 中&quot;">​</a></h3><p>在 <code>env</code> 中加入：</p><div class="language-yaml"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#F07178;">env</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">     </span><span style="color:#F07178;">CGO_ENABLED</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span></code></pre></div><h1 id="结尾" tabindex="-1">结尾 <a class="header-anchor" href="#结尾" aria-label="Permalink to &quot;结尾&quot;">​</a></h1><p>总的来说问题就是这样解决的了，有啥不对欢迎大佬在评论区补充。</p>`,23),t=[n];function p(r,c,i,h,d,u){return s(),e("div",null,t)}const b=a(l,[["render",p]]);export{g as __pageData,b as default};
